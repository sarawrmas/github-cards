{"version":3,"sources":["components/Card.js","components/CardList.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Card","profile","this","props","className","src","avatar_url","name","company","React","Component","CardList","profiles","map","id","Form","state","username","handleSubmit","e","a","preventDefault","fetch","response","json","data","onSubmit","setState","type","value","onChange","event","target","placeholder","required","App","addNewProfile","profileData","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAEMA,E,4JACJ,WACE,IAAMC,EAAUC,KAAKC,MACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAKJ,EAAQK,aAClB,sBAAKF,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBH,EAAQM,OAC/B,qBAAKH,UAAU,UAAf,SAA0BH,EAAQO,oB,GARzBC,IAAMC,WAeVV,ICNAW,EARE,SAACR,GAChB,OACE,8BACGA,EAAMS,SAASC,KAAI,SAAAZ,GAAO,OAAI,cAAC,EAAD,eAA2BA,GAAhBA,EAAQa,U,uBCJlDC,E,4MACJC,MAAQ,CAAEC,SAAU,I,EACpBC,a,uCAAe,WAAOC,GAAP,iBAAAC,EAAA,6DACbD,EAAEE,iBADW,SAEUC,MAAM,gCAAD,OAAiC,EAAKN,MAAMC,WAF3D,cAEPM,EAFO,gBAGMA,EAASC,OAHf,OAGPC,EAHO,OAIb,EAAKtB,MAAMuB,SAASD,GACpB,EAAKE,SAAS,CAAEV,SAAU,KALb,2C,kGAOf,WAAU,IAAD,OACP,OACE,uBAAMS,SAAUxB,KAAKgB,aAArB,UACE,uBACEU,KAAK,OACLC,MAAO3B,KAAKc,MAAMC,SAClBa,SAAU,SAAAC,GAAK,OAAI,EAAKJ,SAAS,CAAEV,SAAUc,EAAMC,OAAOH,SAC1DI,YAAY,kBACZC,UAAQ,IAEV,qD,GAnBWzB,IAAMC,WAyBVK,ICvBToB,E,4MACJnB,MAAQ,CAACJ,SAAU,I,EACnBwB,cAAgB,SAACC,GACf,EAAKV,UAAS,SAAAW,GAAS,MAAK,CAC1B1B,SAAS,GAAD,mBAAM0B,EAAU1B,UAAhB,CAA0ByB,S,4CAGtC,WACE,OACE,gCACE,qBAAKjC,UAAU,SAAf,0BACA,cAAC,EAAD,CAAMsB,SAAUxB,KAAKkC,gBACrB,cAAC,EAAD,CAAUxB,SAAUV,KAAKc,MAAMJ,kB,GAZrBH,IAAMC,WAkBTyB,ICVAI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.216afab0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    const profile = this.props;\r\n    return (\r\n      <div className=\"github-profile\">\r\n        <img src={profile.avatar_url} />\r\n        <div className=\"info\">\r\n          <div className=\"name\">{profile.name}</div>\r\n          <div className=\"company\">{profile.company}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div>\r\n      {props.profiles.map(profile => <Card key={profile.id} {...profile} />)}\r\n    </div>\r\n  )\r\n  }\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n  state = { username: '' };\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    const response = await fetch(`https://api.github.com/users/${this.state.username}`);\r\n    const data = await response.json()\r\n    this.props.onSubmit(data);\r\n    this.setState({ username: '' })\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.username}\r\n          onChange={event => this.setState({ username: event.target.value })}\r\n          placeholder=\"GitHub username\"\r\n          required\r\n        />\r\n        <button>Add Card</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport CardList from \"./components/CardList\";\nimport Form from \"./components/Form\";\n\nclass App extends React.Component {\n  state = {profiles: []}\n  addNewProfile = (profileData) => {\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData]\n    }))\n  }\n  render() {\n    return(\n      <div>\n        <div className=\"header\">GitHub Cards</div>\n        <Form onSubmit={this.addNewProfile}/>\n        <CardList profiles={this.state.profiles}/>\n      </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}